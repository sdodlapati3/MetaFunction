# Enhanced CI/CD Pipeline with Advanced Security and Deployment Features
name: MetaFunction Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily security scans
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      deployment_strategy:
        description: 'Deployment strategy'
        required: true
        default: 'rolling'
        type: choice
        options:
        - rolling
        - blue-green
        - canary

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pre-commit and Static Analysis
  static-analysis:
    name: Static Analysis & Code Quality
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.changes.outputs.deploy }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            deploy:
              - 'app/**'
              - 'deployment/**'
              - 'Dockerfile'
              - 'requirements.txt'
            
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install analysis tools
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit bandit safety semgrep ruff mypy pylint
          pip install -r requirements.txt -r requirements-dev.txt
      
      - name: Cache pre-commit
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
      
      - name: Run pre-commit hooks
        run: pre-commit run --all-files
      
      - name: Advanced static analysis with Semgrep
        run: |
          semgrep --config=auto --json --output=semgrep-results.json .
          semgrep --config=p/security-audit --json --output=semgrep-security.json .
      
      - name: Code complexity analysis
        run: |
          python -m radon cc app/ resolvers/ --json > complexity-report.json
          python -m radon mi app/ resolvers/ --json > maintainability-report.json
      
      - name: Upload static analysis results
        uses: actions/upload-artifact@v3
        with:
          name: static-analysis-results
          path: |
            semgrep-*.json
            *-report.json
            bandit-report.json

  # Comprehensive Security Scanning
  security-scan:
    name: Comprehensive Security Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt -r requirements-dev.txt
          pip install safety pip-audit cyclonedx-bom
      
      - name: Dependency vulnerability scan with Safety
        run: |
          safety check --json --output safety-report.json
          pip-audit --format=json --output=pip-audit-report.json
      
      - name: Generate Software Bill of Materials (SBOM)
        run: |
          cyclonedx-py -o sbom.json
          cyclonedx-py -f xml -o sbom.xml
      
      - name: Secret scanning with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
      
      - name: Infrastructure as Code security scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: deployment/
          framework: kubernetes,dockerfile
          output_format: sarif
          output_file_path: checkov-results.sarif
      
      - name: Container image vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
      
      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: |
            trivy-fs-results.sarif
            checkov-results.sarif
      
      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: |
            sbom.json
            sbom.xml

  # Advanced Testing Suite
  test-suite:
    name: Comprehensive Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        test-type: ['unit', 'integration', 'contract']
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
          pip install pytest-xdist pytest-benchmark pytest-mock pytest-asyncio
      
      - name: Run ${{ matrix.test-type }} tests
        env:
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/testdb
          FLASK_ENV: testing
        run: |
          case "${{ matrix.test-type }}" in
            "unit")
              pytest tests/unit/ -v --cov=app --cov=resolvers --cov-report=xml --cov-report=html -n auto
              ;;
            "integration")
              pytest tests/integration/ -v --cov-append --cov-report=xml
              ;;
            "contract")
              pytest tests/contract/ -v --cov-append --cov-report=xml
              ;;
          esac
      
      - name: Performance benchmarks
        if: matrix.test-type == 'unit' && matrix.python-version == '3.11'
        run: |
          pytest tests/benchmarks/ --benchmark-json=benchmark-results.json
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}-${{ matrix.test-type }}
          path: |
            coverage.xml
            htmlcov/
            benchmark-results.json

  # Mutation Testing
  mutation-testing:
    name: Mutation Testing
    runs-on: ubuntu-latest
    needs: test-suite
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt -r requirements-dev.txt
          pip install mutmut
      
      - name: Run mutation testing
        run: |
          mutmut run --paths-to-mutate app/ --tests-dir tests/unit/
          mutmut results > mutation-report.txt
      
      - name: Upload mutation testing results
        uses: actions/upload-artifact@v3
        with:
          name: mutation-testing-results
          path: mutation-report.txt

  # Build and Container Security
  build:
    name: Build & Container Security
    runs-on: ubuntu-latest
    needs: [static-analysis, security-scan]
    if: needs.static-analysis.outputs.should_deploy == 'true'
    outputs:
      image_digest: ${{ steps.build.outputs.digest }}
      image_tag: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          sbom: true
          provenance: true
      
      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-container-results.sarif'
      
      - name: Container structure test
        run: |
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          ./container-structure-test-linux-amd64 test --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --config tests/container-structure-test.yaml
      
      - name: Sign container image with Cosign
        uses: sigstore/cosign-installer@v3
      
      - name: Sign the container image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}

  # Performance and Load Testing
  performance-testing:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install load testing tools
        run: |
          pip install locust k6 artillery
          npm install -g artillery
      
      - name: Start application container
        run: |
          docker run -d -p 8000:8000 --name test-app \
            -e REDIS_URL=redis://redis:6379 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          sleep 30
      
      - name: Run performance tests with Locust
        run: |
          locust -f tests/performance/locustfile.py \
            --headless -u 100 -r 20 -t 300s \
            --host http://localhost:8000 \
            --html performance-report.html
      
      - name: Run Artillery load tests
        run: |
          artillery run tests/performance/artillery-config.yml \
            --output artillery-report.json
      
      - name: Performance regression analysis
        run: |
          python tests/performance/analyze_results.py \
            --current performance-report.html \
            --baseline performance-baseline.json \
            --threshold 10
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            performance-report.html
            artillery-report.json

  # Kubernetes Deployment Validation
  k8s-validation:
    name: Kubernetes Deployment Validation
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Kubernetes tools
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          curl -LO https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz
          tar xf kubeconform-linux-amd64.tar.gz && sudo mv kubeconform /usr/local/bin/
          curl -LO https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz && sudo mv kubeval /usr/local/bin/
      
      - name: Validate Kubernetes manifests
        run: |
          # Validate with kubeconform
          kubeconform -summary -verbose deployment/k8s/*.yaml
          
          # Validate with kubeval
          kubeval deployment/k8s/*.yaml
      
      - name: Dry-run Kubernetes deployment
        run: |
          kubectl apply --dry-run=client -f deployment/k8s/ || true
      
      - name: Helm chart validation
        if: github.ref == 'refs/heads/main'
        run: |
          curl https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz | tar xz
          sudo mv linux-amd64/helm /usr/local/bin/
          helm lint deployment/helm/metafunction/
          helm template metafunction deployment/helm/metafunction/ --debug

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, k8s-validation, performance-testing]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'staging')
    environment: 
      name: staging
      url: https://staging.metafunction.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure Kubernetes
        run: |
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
      
      - name: Deploy with Helm
        run: |
          helm upgrade --install metafunction-staging deployment/helm/metafunction/ \
            --namespace staging --create-namespace \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ github.sha }} \
            --set ingress.hostname=staging.metafunction.com \
            --wait --timeout=600s
      
      - name: Run smoke tests
        run: |
          python tests/smoke/staging_smoke_tests.py --url https://staging.metafunction.com
      
      - name: Monitor deployment
        run: |
          kubectl rollout status deployment/metafunction-staging -n staging --timeout=300s

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'production')
    environment: 
      name: production
      url: https://metafunction.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure Kubernetes
        run: |
          echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
      
      - name: Pre-deployment backup
        run: |
          python scripts/backup_database.py --environment production
      
      - name: Deploy with selected strategy
        run: |
          STRATEGY="${{ github.event.inputs.deployment_strategy || 'rolling' }}"
          case "$STRATEGY" in
            "blue-green")
              ./scripts/blue-green-deploy.sh ${{ github.sha }}
              ;;
            "canary")
              ./scripts/canary-deploy.sh ${{ github.sha }}
              ;;
            *)
              helm upgrade --install metafunction-prod deployment/helm/metafunction/ \
                --namespace production --create-namespace \
                --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
                --set image.tag=${{ github.sha }} \
                --set ingress.hostname=metafunction.com \
                --wait --timeout=900s
              ;;
          esac
      
      - name: Run comprehensive tests
        run: |
          python tests/e2e/production_tests.py --url https://metafunction.com
          python tests/performance/production_performance_check.py
      
      - name: Update monitoring dashboards
        run: |
          python scripts/update_dashboards.py --deployment ${{ github.sha }}

  # Post-deployment validation
  post-deployment:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always() && (needs.deploy-production.result == 'success')
    steps:
      - uses: actions/checkout@v4
      
      - name: Security verification
        run: |
          python tests/security/post_deploy_security_check.py --url https://metafunction.com
      
      - name: Performance verification
        run: |
          python tests/performance/post_deploy_performance_check.py --url https://metafunction.com
      
      - name: Update deployment metrics
        run: |
          python scripts/update_deployment_metrics.py \
            --deployment-id ${{ github.sha }} \
            --status success \
            --environment production

  # Notification and Reporting
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, post-deployment]
    if: always()
    steps:
      - name: Deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          username: 'GitHub Actions'
          icon_emoji: ':rocket:'
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      
      - name: Update deployment dashboard
        run: |
          curl -X POST "${{ secrets.DEPLOYMENT_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{
              "deployment_id": "${{ github.sha }}",
              "status": "${{ job.status }}",
              "environment": "production",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'"
            }'

  # Cleanup and archival
  cleanup:
    name: Cleanup and Archival
    runs-on: ubuntu-latest
    needs: [notify]
    if: always()
    steps:
      - name: Archive deployment artifacts
        run: |
          # Archive logs and reports for compliance
          echo "Archiving deployment artifacts for SHA: ${{ github.sha }}"
      
      - name: Cleanup old images
        run: |
          # Clean up old container images based on retention policy
          echo "Cleaning up old container images"
      
      - name: Update security compliance records
        run: |
          # Update compliance tracking
          echo "Recording deployment for compliance audit"
